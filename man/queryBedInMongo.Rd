% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/queryBed.R
\docType{methods}
\name{queryBedInMongo,RMongo,character,GRanges,function-method}
\alias{queryBedInMongo,RMongo,character,GRanges,function-method}
\alias{queryBedInMongo}
\title{simple retrieval of documents representing bed ranges}
\usage{
\S4method{queryBedInMongo}{RMongo,character,GRanges,`function`}(con,
  collectionName, queryGRange, queryGen, ...)
}
\arguments{
\item{con}{connection to mongodb, may be RMongo instance or mongo (mongolite) instance}

\item{collectionName}{character(1) name of collection (will be implicit for mongolite)}

\item{queryGRange}{length(1) GRanges instance}

\item{queryGen}{a function with arguments queryGR and cfields, see \code{\link{grConverter}} for a typical example}

\item{\dots}{passed to RMongo::dbGetQuery}
}
\description{
simple retrieval of documents representing bed ranges
}
\note{
Note that a default characteristic of RMongo::dbGetQuery is to retrieve 1000 records with parameter \code{limit=1000}.  You can pass alternate
values of this parameter through the ... .  If you do want to use the limit parameter, in dbGetQuery,
you must also specify skip.
}
\examples{
if (interactive()) {
 if (verifyRunningMongodb()) {
   f1 = dir(system.file("bedfiles", package="TxRegInfra"), full=TRUE, patt="ENCFF971VCD")
   chk1 = importBedToMongo(f1, "vjc1", db="test")
   stopifnot(chk1)
   con = RMongo::mongoDbConnect("test")
   requireNamespace("GenomicRanges")
   print(queryBedInMongo(con, "vjc1", GRanges("chr1", IRanges(1, 8e5))) )
   mlcon = mongoliteCon(url="mongodb://127.0.0.1",
               db="test", collection="vjc1")
   print(queryBedInMongo(mlcon, "vjc1", GRanges("chr1", IRanges(1, 8e5))) )
   rm(mlcon)
   system('mongo test --eval "db.vjc1.remove({})"') # cleanup
     } else {
     cat("could not find running mongodb, try 'mongod' in shell.\\n")
     }
}
}
